<!DOCTYPE html>
<html lang="fr">
<link rel="icon" href="icon-192.png" type="image/png">
<link rel="apple-touch-icon" href="https://img.recraft.ai/qM46TbX5p907ydsxL616HwT0WfgrUheLDo9qYTxv6iU/rs:fit:1024:1024:0/q:95/g:no/plain/abs://prod/images/e32c1bed-49ea-4d0c-b762-ce2627ea2749@jpg.png">
<link rel="manifest" href="manifest.json">
<meta name="theme-color" content="#1e272e">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Calculateur GTG / SPEED Avancé</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #1e272e;
      color: #fff;
      padding: 20px;
    }
    .container {
      max-width: 700px;
      margin: auto;
      background-color: #2f3640;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    }

    h2 {
      text-align: center;
      color: #00cec9;
      background-color: #fff;
      color: #2f3640;
      padding: 10px;
      border-radius: 6px;
    }

    label {
      margin-top: 10px;
      display: block;
      font-size: 14px;
      color: #dcdde1;
    }

    input, select, button {
      width: 100%;
      padding: 6px;
      margin-top: 5px;
      border-radius: 6px;
      border: none;
      font-size: 14px;
    }

    input, select {
      background-color: #dcdde1;
      color: #2f3640;
    }

    button {
      background-color: #00cec9;
      color: white;
      font-weight: bold;
      margin-top: 15px;
      cursor: pointer;
      transition: 0.3s;
    }

    button:hover {
      background-color: #00b894;
    }

    .result {
      margin-top: 20px;
      padding: 10px;
      background-color: #fff;
      color: #000;
      border-radius: 5px;
      font-weight: bold;
    }

    .warning {
      color: red;
      margin-top: 10px;
      font-weight: bold;
    }

    .line {
      border-top: 1px solid #ccc;
      margin: 8px 0;
    }

    /* Style for chart */
    .chart-container {
      margin-top: 30px;
      position: relative;
      height: 300px;
      width: 100%;
    }

    canvas {
      max-width: 100%;
      height: 100%;
      background-color: #f5f5f5;
      border-radius: 6px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>Rapport de Production</h2>

    <!-- Input Form -->
    <label>Type (Work Center):</label>
    <select id="gtgMode">
      <option value="four">Four</option>
      <option value="inspection">Inspection Final</option>
    </select>

    <label>Pièces bonnes (Base Value):</label>
    <input type="number" id="baseValue" step="0.01" />

    <label>Scrap (ex: 100+200*2):</label>
    <input type="text" id="scrap" />

    <label>Vitesse Machine (Speed):</label>
    <input type="number" id="speed" step="0.01" />

    <label>Heures de travail (ex: 8.5):</label>
    <input type="number" id="workHours" step="0.01" />

    <label>Objectif GTG (%):</label>
    <input type="number" id="gtgTarget" step="0.01" />

    <label>Durée estimée (ex: 4.5 secondes ou 400 pièces):</label>
    <input type="number" id="dureeEstimee" step="0.01" />

    <select id="dureeMode">
      <option value="secondes">Secondes</option>
      <option value="pieces">Pièces</option>
    </select>

    <button onclick="calculer()">Calculer</button>

    <div class="result" id="result"></div>
    
    <!-- Chart Container -->
    <div class="chart-container">
      <canvas id="myChart"></canvas>
    </div>
  </div>

  <script>
    function convertToHM(decimal) {
      const h = Math.floor(decimal);
      const m = Math.round((decimal - h) * 60);
      return `${h}h ${m}min`;
    }

    function safeEval(expr) {
      try {
        return Function('"use strict"; return (' + expr + ')')();
      } catch {
        return NaN;
      }
    }

    function ligne() {
      return '<div class="line"></div>';
    }

    function calculer() {
      const baseValue = parseFloat(document.getElementById("baseValue").value);
      const scrap = safeEval(document.getElementById("scrap").value);
      const speed = parseFloat(document.getElementById("speed").value);
      const workHours = parseFloat(document.getElementById("workHours").value);
      const gtgTarget = parseFloat(document.getElementById("gtgTarget").value);
      const gtgMode = document.getElementById("gtgMode").value;
      const dureeEstimee = parseFloat(document.getElementById("dureeEstimee").value);
      const dureeMode = document.getElementById("dureeMode").value;

      let resultText = "";
      let gtg = 0, ku = 0, netPack = 0;

      if (!isNaN(baseValue) && !isNaN(scrap)) {
        gtg = (baseValue / (baseValue + scrap)) * 100;
        resultText += `* GTG: ${gtg.toFixed(2)}%<br>` + ligne();
      }

      if (!isNaN(gtgTarget) && !isNaN(baseValue)) {
        const scrapMax = Math.floor((baseValue * (100 - gtgTarget)) / gtgTarget);
        resultText += `* Scrap max: ${scrapMax} pièces<br>` + ligne();
      }

      if (gtgMode === 'inspection') {
        resultText += `KU et Speed ne sont pas disponibles pour le mode Inspection Final<br>` + ligne();
      }

      if (!isNaN(baseValue) && !isNaN(speed) && !isNaN(workHours) && gtgMode === 'four') {
        const speedTime = baseValue / speed;
        const remainingTime = workHours - speedTime;
        ku = ((workHours - remainingTime) / workHours) * 100;
        resultText += `* Prod: ${convertToHM(speedTime)}<br>`;
        resultText += `* Reste: ${convertToHM(remainingTime)}<br>`;
        resultText += ligne();
        resultText += `* KU: ${ku.toFixed(2)}%<br>`;
        resultText += ligne();
      }

      if (!isNaN(speed)) {
        const cycleTime = 3600 / speed;
        resultText += `* CYCLE TIME: ${cycleTime.toFixed(2)} sec<br>`;
        resultText += ligne();
      }

      if (!isNaN(speed) && !isNaN(baseValue) && !isNaN(scrap)) {
        if (gtgMode === "four") {
          netPack = speed * (ku / 100) * (gtg / 100);
          resultText += `* Net Pack: ${netPack.toFixed(2)}<br>` + ligne();
        }
      }

      if (!isNaN(dureeEstimee)) {
        if (dureeMode === 'secondes') {
          const perMin = 60 / dureeEstimee;
          const perHour = perMin * 60;
          resultText += `* ${dureeEstimee} sec = ${perMin.toFixed(2)} pièces/min - ${perHour.toFixed(2)} pièces/h<br>`;
        } else if (dureeMode === 'pieces') {
          const totalSeconds = dureeEstimee * 4.5;
          const totalMinutes = totalSeconds / 60;
          resultText += `* ${dureeEstimee} pièces ≈ ${totalMinutes.toFixed(2)} min = ${convertToHM(totalMinutes / 60)}<br>`;
        }
        resultText += ligne();
      }

      document.getElementById("result").innerHTML = resultText;

      // Update chart
      updateChart(gtg, ku, netPack);
    }

    // Initialize chart
    let ctx = document.getElementById('myChart').getContext('2d');
    let chart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['GTG', 'KU', 'Net Pack'],
        datasets: [{
          label: 'Performance Metrics',
          data: [0, 0, 0], // Default values
          backgroundColor: ['#00cec9', '#00b894', '#ff7675'],
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
            max: 100
          }
        }
      }
    });

    function updateChart(gtg, ku, netPack) {
      chart.data.datasets[0].data = [gtg, ku, netPack];
      chart.update();
    }
  </script>
</body>
</html>
